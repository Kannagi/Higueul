
.org 0x7FB0
.org 0x7FC0
SNES_HEADER

SNES_BANK 1


func SNDK_VBlank:;
{
	uint16 adrbg3;

	SNDK_SendOAM
	
	
	//------
	
	//0x800 4 DMA SPRITE
	//0x20 palette
	//0x100 scrolling BG1&2
	//0x40 update 16x16 tile x2
	//0x40 update tilemap
	/*
	MODE16
	VMADD = 0x0000;
	DMA_ADD_0 = 0;
	DMA_SIZE_0 = (0x600+0x20+0x80+0x100+0x40);
	MODE8
	
	DMA_BANK_0 =  0x7F;
	
	MDMAEN = 1;
	*/

	//BG3 update line
	MODE16
	acc = adrbg3;
	acc = acc>>1;
	VMADD = acc + 0x5C00;
	
	DMA_ADD_0 = $SNDK_BG3.t1 + adrbg3;
	
	acc = adrbg3;
	acc += 0x80;
	if acc == 0x800
	{
		acc = 0;
	}
	adrbg3 = acc;
	 
	DMA_SIZE_0 = 0x80;
	MODE8
	
	DMA_BANK_0 =  #SNDK_BG3.t1;
	
	MDMAEN = 1;
}

func SNDK_WaitVBlank:;
{
	acc = SNDK.clockf;
	acc += 1;
	if acc == 60 //60 frames
	{
		acc = SNDK.clocks;
		acc += 1;
		if acc == 60 //60 secondes
		{
			acc = SNDK.clockm;
			acc += 1;
			if acc == 60 //60 minutes
			{
				SNDK.clockh += 1;
				acc = 0;
			}
			SNDK.clockm = acc;
			acc = 0;
		}
		SNDK.clocks = acc;
		acc = 0;
	}
	SNDK.clockf = acc;
	
	acc = SLHV;
	acc = OPVCT;
	
	MODE16
	acc = acc & 0xFF;
	WRDIVL = acc << 6;
	MODE8
	WRDIVB = 143;
	if SNDK.mcpu < SNDK.cpu
	{
		SNDK.mcpu  = SNDK.cpu;
	}
	
	if SNDK.pcpu < SNDK.cpu
	{
		SNDK.pcpu  = SNDK.cpu;
	}
	
	SNDK.cpu = RDDIVL;
	
	VBlank.enable = 1;
	asm "wai";
	VBlank.enable = 0;
}
