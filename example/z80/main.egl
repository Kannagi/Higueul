
// -----------------------------------------------------------------------------
// Definitions

.define NOS_STATEBIT_SFX_PLAYING 0x00

// -----------------------------------------------------------------------------
// main entry point, on Z80, entry point is $0000

.code 0x0000

proc _start:
{
	// theres no room for code, we are in the interrupt vector and address
	// $0000 is the reset ISR. Let's jump somewhere else.
	jump main:
}

// -----------------------------------------------------------------------------
// Some vacriables. We shouldn't define variables here, but this part of the
// interrupt vector isn't used because the interrupt mode is 1.
.bss 0x10

uint8 NOS_sysMissedClock
uint8 NOS_state
uint16 SGA_selectedBank

.code 0x100

proc main:
{
	asm "di"

	asm "ld sp, 0x1FFF"

	asm "im 1"

	// Addition test ---------------------------
	// NOS_state = NOS_state + acc

	// assignation test ------------------------
	rb = [idhl]


	acc = 0
	acc = NOS_sysMissedClock
	acc = $NOS_sysMissedClock
	acc = $NOS_state
	acc = @NOS_sysMissedClock
	//NOS_sysMissedClock = [idhl]

	NOS_sysMissedClock = 0
	NOS_state = 0
	SGA_selectedBank = 0
	SGA_selectedBank = 1
	rb = 0
	acc = rb
	idhl = 3
	SGA_selectedBank = ra
	//rb = 22
	//rb = [$SGA_selectedBank, acc, uint16]

	//SGA_selectedBank = [$NOS_state] + [$NOS_state] + [$NOS_state]

	//SGA_selectedBank = NOS_state // <- in error
	//NOS_state = SGA_selectedBank
	asm "ei"
}

